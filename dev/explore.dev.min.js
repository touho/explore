function assert(condition, message) {
	if (!condition)
		{ throw new Error(message); }
}

var serializables = {};
window.serializables = serializables;

function addSerializable(serializable) {
	if (serializables[serializable.id]) { throw new Error('Serializable id clash!'); }
	serializables[serializable.id] = serializable;
}

function getSerializable(id) {
	return serializables[id] || null;
}



function removeSerializable(id) {
	if (serializables[id])
		{ delete serializables[id]; }
	else
		{ throw new Error('Serializable not found!'); }
}

var CHARACTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'; // 62 chars
var CHAR_COUNT = CHARACTERS.length;
function char() {
	return CHARACTERS[Math.random() * CHAR_COUNT | 0];
}
function createStringId(threeLetterPrefix, characters) {
	if ( threeLetterPrefix === void 0 ) threeLetterPrefix = '???';
	if ( characters === void 0 ) characters = 16;

	var id = threeLetterPrefix;
	for (var i = characters - 1; i !== 0; --i)
		{ id += char(); }
	return id;
}

var serializableClasses = new Map();

var Serializable = function Serializable(predefinedId) {
	if ( predefinedId === void 0 ) predefinedId = false;

	// defined in prototype
	// this._dirty = true;
	// this._parent = null;
		
	assert(this.threeLetterType, 'Forgot to Serializable.registerSerializable your class?');
	this._children = new Map(); // threeLetterType -> array
	this.id = predefinedId || createStringId(this.threeLetterType);
	if (this.id.startsWith('?'))
		{ throw new Error('?'); }
	addSerializable(this);
};
Serializable.prototype.delete = function delete$1 () {
	if (this._parent) {
		this._parent.deleteChild(this);
		return;
	}
	this.deleteChildren();
	removeSerializable(this.id);
};
Serializable.prototype.deleteChildren = function deleteChildren () {
	this._children.forEach(function (array) {
		array.forEach(function (child) {
			child._parent = null;
			child.delete();
		});
	});
	this._children.clear();
};
Serializable.prototype.addChildren = function addChildren (children) {
		var this$1 = this;

	for (var i = 0; i < children.length; i++)
		{ this$1.addChild(children[i]); }
	return this;
};
Serializable.prototype.addChild = function addChild (child) {
	var array = this._children.get(child.threeLetterType);
	if (array === undefined) {
		array = [];
		this._children.set(child.threeLetterType, array);
	}
	array.push(child);
	child._parent = this;
	return this;
};
Serializable.prototype.findChild = function findChild (threeLetterType, filterFunction) {
	var array = this._children.get(threeLetterType);
	return array && array.find(filterFunction) || null;
};
Serializable.prototype.deleteChild = function deleteChild (child) {
	this.detachChild(child);
	child.delete();
	return this;
};
Serializable.prototype.detachChild = function detachChild (child) {
	var array = this._children.get(child.threeLetterType);
	var idx = array.indexOf(child);
	assert(idx >= 0, 'child not found');
	array.splice(idx, 1);
	if (array.length === 0)
		{ this._children.delete(child.threeLetterType); }
	child._parent = null;
	return this;
};
Serializable.prototype.forEachChild = function forEachChild (threeLetterType, callback, deep) {
		if ( threeLetterType === void 0 ) threeLetterType = null;
		if ( deep === void 0 ) deep = false;

	function processArray(array) {
		array.forEach(function (child) {
			callback(child);
			deep && child.forEachChild(threeLetterType, callback, true);
		});
	}
	if (threeLetterType) {
		processArray(this._children.get(threeLetterType) || []);
	} else {
		this._children.forEach(processArray);
	}
	return this;
};
Serializable.prototype.detach = function detach () {
	this._parent && this._parent.detachChild(this);
	return this;
};
Serializable.prototype.getParent = function getParent () {
	return this._parent || null;
};
Serializable.prototype.getChildren = function getChildren (threeLetterType) {
	return this._children.get(threeLetterType) || [];
};
Serializable.prototype.toJSON = function toJSON () {
	var json = {
		id: this.id
	};
	if (this._children.size > 0) {
		var arrays = [];
		this._children.forEach(function (child) { return arrays.push(child); });
		json.c = (ref = []).concat.apply(ref, arrays);
	}
	return json;
		var ref;
};
Serializable.prototype.toString = function toString () {
	return JSON.stringify(this.toJSON(), null, 4);
};
Serializable.prototype.markDirty = function markDirty () {
	this._dirty || (this._dirty = true) && this._parent && this._parent.markDirty();
	return this;
};
Serializable.prototype.clone = function clone () {
	var obj = new this.constructor();
	var children = [];
	this.forEachChild(null, function (child) {
		children.push(child.clone());
	});
	obj.addChildren(children);
	return obj;
};
Serializable.fromJSON = function fromJSON (json) {
	assert(typeof json.id === 'string' && json.id.length > 3);
	var fromJSON = serializableClasses.get(json.id.substring(0, 3));
	assert(fromJSON);
	var obj = fromJSON(json);
	obj.addChildren(json.c ? json.c.map(function (child) { return Serializable.fromJSON(child); }) : []);
	return obj;
};
Serializable.registerSerializable = function registerSerializable (Class, threeLetterType, fromJSON) {
		if ( fromJSON === void 0 ) fromJSON = null;

	Class.prototype.threeLetterType = threeLetterType;
	assert(typeof threeLetterType === 'string' && threeLetterType.length === 3);
	if (!fromJSON)
		{ fromJSON = function (json) { return new Class(json.id); }; }
	serializableClasses.set(threeLetterType, fromJSON);
};

Serializable.prototype._dirty = true;
Serializable.prototype._parent = null;

// Instance of a property
var Property = (function (Serializable$$1) {
	function Property(ref) {
		var value = ref.value;
		var predefinedId = ref.predefinedId;
		var name = ref.name;
		var propertyType = ref.propertyType;
		var skipSerializableRegistering = ref.skipSerializableRegistering; if ( skipSerializableRegistering === void 0 ) skipSerializableRegistering = false;

		assert(name, 'Property without a name can not exist');
		if (!skipSerializableRegistering)
			{ Serializable$$1.call(this, predefinedId); }
		this._initialValue = value;
		if (propertyType)
			{ this.setPropertyType(propertyType); }
		else
			{ this.name = name; }
	}

	if ( Serializable$$1 ) Property.__proto__ = Serializable$$1;
	Property.prototype = Object.create( Serializable$$1 && Serializable$$1.prototype );
	Property.prototype.constructor = Property;
	Property.prototype.setPropertyType = function setPropertyType (propertyType) {
		this.propertyType = propertyType;
		try {
			this.value = this._initialValue !== undefined ? this._initialValue : propertyType.initialValue;
		} catch(e) {
			console.log('Invalid value', e, propertyType, this);
			this.value = propertyType.initialValue;
		}
		this.name = propertyType.name;
	};
	Property.prototype.clone = function clone (skipSerializableRegistering) {
		if ( skipSerializableRegistering === void 0 ) skipSerializableRegistering = false;

		return new Property({
			value: this.value,
			name: this.name,
			propertyType: this.propertyType,
			skipSerializableRegistering: skipSerializableRegistering
		});
	};
	Property.prototype.toJSON = function toJSON () {
		return Object.assign(Serializable$$1.prototype.toJSON.call(this), {
			v: this.type.toJSON(this.value),
			n: this.propertyType.name
		});
	};
	Property.prototype.delete = function delete$1 () {
		Serializable$$1.prototype.delete.call(this);
		this.model = null;
	};

	return Property;
}(Serializable));

Property.prototype.propertyType = null;
Object.defineProperty(Property.prototype, 'type', {
	get: function get() {
		return this.propertyType.type;
	}
});
Object.defineProperty(Property.prototype, 'value', {
	set: function set(newValue) {
		this._value = this.propertyType.validator.validate(newValue);
		this.markDirty();
	},
	get: function get() {
		return this._value;
	}
});
Property.fromJSON = function(json) {
	return {
		value: json.v,
		predefinedId: json.id
	};
};
Serializable.registerSerializable(Property, 'prp', function (json) {
	return new Property({
		value: json.v,
		predefinedId: json.id,
		name: json.n
	});
});

// info about type, validator, validatorParameters, initialValue



var PropertyType = function PropertyType(name, type, validator, initialValue) {
	assert(typeof name === 'string');
	assert(type && typeof type.name === 'string');
	assert(validator && typeof validator.validate === 'function');
		
	this.name = name;
	this.type = type;
	this.validator = validator;
	this.initialValue = initialValue;
};
PropertyType.prototype.createProperty = function createProperty (ref) {
		if ( ref === void 0 ) ref = {};
		var value = ref.value;
		var predefinedId = ref.predefinedId;
		var skipSerializableRegistering = ref.skipSerializableRegistering; if ( skipSerializableRegistering === void 0 ) skipSerializableRegistering = false;

	return new Property({
		propertyType: this,
		value: value,
		predefinedId: predefinedId,
		name: this.name,
		skipSerializableRegistering: skipSerializableRegistering
	});
};

/*
	Beautiful way of creating property types
	
	optionalParameters:
		description: 'Example',
		validator: PropertyType.
 */
function createPropertyType(propertyName, defaultValue, type) {
	var optionalParameters = [], len = arguments.length - 3;
	while ( len-- > 0 ) optionalParameters[ len ] = arguments[ len + 3 ];

	type = type();
	var validator = type.validators.default();
	var description = '';
	optionalParameters.forEach(function (p) {
		if (typeof p === 'string')
			{ description = p; }
		else if (p && p.validate)
			{ validator = p; }
		else
			{ assert(false, 'invalid parameter ' + p); }
	});
	return new PropertyType(propertyName, type, validator, defaultValue);
}

function addDataType(ref) {
	var name = ref.name; if ( name === void 0 ) name = '';
	var validators = ref.validators; if ( validators === void 0 ) validators = { default: function (x) { return x; } };
	var toJSON = ref.toJSON; if ( toJSON === void 0 ) toJSON = function (x) { return x; };
	var fromJSON = ref.fromJSON; if ( fromJSON === void 0 ) fromJSON = function (x) { return x; };

	assert(name, 'name missing from property type');
	assert(typeof validators.default === 'function','default validator missing from property type: ' + name);
	assert(typeof toJSON === 'function', 'invalid toJSON for property type: ' + name);
	assert(typeof fromJSON === 'function', 'invalid fromJSON for property type: ' + name);

	var type = {
		name: name,
		validators: validators,
		toJSON: toJSON,
		fromJSON: fromJSON
	};
	var createType = function () { return type; };

	Object.keys(validators).forEach(function (validatorName) {
		createType[validatorName] = createValidator(validatorName, validators[validatorName]);
		validators[validatorName] = createType[validatorName];
	});
	createPropertyType[name] = createType;
}

function createValidator(name, validatorFunction) {
	var validator = function() {
		var i = arguments.length, argsArray = Array(i);
		while ( i-- ) argsArray[i] = arguments[i];

		var parameters = [].concat( argsArray );
		return {
			validatorName: name,
			validatorParameters: parameters,
			validate: function (x) { return validatorFunction.apply(void 0, [ x ].concat( parameters )); }
		};
	};
	validator.validatorName = name;
	validator.validate = validatorFunction;
	return validator;
}

function isValidFloat(x) {
	return !isNaN(x) && x !== Infinity && x !== -Infinity;
}

addDataType({
	name: 'float',
	validators: {
		default: function default$1(x) {
			x = parseFloat(x);
			assert(isValidFloat(x), 'invalid float: ' + x);
			return x;
		},
		// PropertyType.float.range(min, max)
		range: function range(x, min, max) {
			x = parseFloat(x);
			assert(isValidFloat(x), 'invalid float: ' + x);
			return Math.min(max, Math.max(min, x));
		}
	},
	toJSON: function (x) { return x; },
	fromJSON: function (x) { return x; }
});

addDataType({
	name: 'vector',
	validators: {
		default: function default$2(vec) {
			assert(vec instanceof Victor);
			assert(isValidFloat(vec.x) && isValidFloat(vec.y));
			return vec;
		}
	},
	toJSON: function (vec) { return vec.toObject(); },
	fromJSON: function (vec) { return Victor.fromObject(vec); }
});

addDataType({
	name: 'string',
	validators: {
		default: function (x) { return x ? String(x) : ''; }
	},
	toJSON: function (x) { return x; },
	fromJSON: function (x) { return x; }
});

addDataType({
	name: 'vector',
	validators: {
		default: function (x) { return x instanceof Victor; }
	},
	toJSON: function (vec) { return vec.toObject(); },
	fromJSON: Victor.fromObject
});

var PropertyOwner = (function (Serializable$$1) {
	function PropertyOwner(predefinedId) {
		if ( predefinedId === void 0 ) predefinedId = false;

		assert(Array.isArray(this.constructor._propertyTypes), 'call PropertyOwner.defineProperties after class definition');
		Serializable$$1.call(this, predefinedId);
		this._properties = {};
		
		/*
		let properties = children.filter(child => child.threeLetterType === 'prp');

		properties.forEach(prop => {
			if (!prop.propertyType) {
				if (prop.name) {
					prop.setPropertyType(this.constructor._propertyTypesByName[prop.name]);
				} else {
					assert(false, 'property does not have propertyType nor name');
				}
			}
		});
		
		this._properties = {};
		let givenPropertiesMap = {};
		for (let i = 0; i < properties.length; i++)
			givenPropertiesMap[properties[i].propertyType.name] = properties[i];

		this.constructor._propertyTypes.forEach(propertyType => {
			let property = givenPropertiesMap[propertyType.name] || propertyType.createProperty();
			classInstance._properties[propertyType.name] = property;
			classInstance.addChild(property);
		});
		*/
	}

	if ( Serializable$$1 ) PropertyOwner.__proto__ = Serializable$$1;
	PropertyOwner.prototype = Object.create( Serializable$$1 && Serializable$$1.prototype );
	PropertyOwner.prototype.constructor = PropertyOwner;
	// Just a helper
	PropertyOwner.prototype.initWithPropertyValues = function initWithPropertyValues (values) {
		var this$1 = this;
		if ( values === void 0 ) values = {};

		var children = [];
		
		Object.keys(values).forEach(function (propName) {
			var propertyType = this$1.constructor._propertyTypesByName[propName];
			assert(propertyType, 'Invalid property ' + propName);
			children.push(propertyType.createProperty({
				value: values[propName]
			}));
		});
		this.addChildren(children);
		return this;
	};
	PropertyOwner.prototype.addChildren = function addChildren (children) {
		var this$1 = this;
		if ( children === void 0 ) children = [];

		this._addChildrenCalled = true;
		var propChildren = [];
		var otherChildren = [];
		// Separate Property children and other children
		children.forEach(function (child) {
			if (child.threeLetterType === 'prp') {
				propChildren.push(child);
			} else {
				otherChildren.push(child);
			}
		});
		Serializable$$1.prototype.addChildren.call(this, otherChildren);
		if (propChildren.length === 0) { return; }
		
		var invalidPropertiesCount = 0;
		
		// Make sure Properties have a PropertyType. They don't work without it.
		propChildren.filter(function (prop) { return !prop.propertyType; }).forEach(function (prop) {
			if (!this$1.constructor._propertyTypesByName[prop.name]) {
				console.log('Property of that name not defined', this$1.id, prop.name, this$1);
				invalidPropertiesCount++;
				prop.isInvalid = true;
				return;
			}
			prop.setPropertyType(this$1.constructor._propertyTypesByName[prop.name]);
		});
		if (invalidPropertiesCount)
			{ propChildren = propChildren.filter(function (p) { return !p.isInvalid; }); }
		
		// Make sure all PropertyTypes have a matching Property
		var nameToProp = {};
		propChildren.forEach(function (c) { return nameToProp[c.name] = c; });
		this.constructor._propertyTypes.forEach(function (propertyType) {
			if (!nameToProp[propertyType.name])
				{ propChildren.push(propertyType.createProperty()); }
		});
		
		Serializable$$1.prototype.addChildren.call(this, propChildren);
	};
	PropertyOwner.prototype.addChild = function addChild (child) {
		assert(this._addChildrenCalled, this.constructor.name + ' requires that addChildren will be called before addChild');
		Serializable$$1.prototype.addChild.call(this, child);
		if (child.threeLetterType === 'prp') {
			if (!child.propertyType) {
				if (!this.constructor._propertyTypesByName[child.name]) {
					console.log('Property of that name not defined', this.id, child, this);
					return;
				}
				child.setPropertyType(this.constructor._propertyTypesByName[child.name]);
			}
			assert(this._properties[child.propertyType.name] === undefined, 'Property already added');
			this._properties[child.propertyType.name] = child;
		}
	};
	PropertyOwner.prototype.delete = function delete$1 () {
		Serializable$$1.prototype.delete.call(this);
		this._properties = {};
	};
	PropertyOwner.prototype.deleteChild = function deleteChild (child) {
		assert(child.threeLetterType !== 'prp', 'Can not delete just one Property child.');
		Serializable$$1.prototype.deleteChild.call(this, child);
	};

	return PropertyOwner;
}(Serializable));

PropertyOwner.defineProperties = function(Class, propertyTypes) {
	Class._propertyTypes = propertyTypes;
	Class._propertyTypesByName = {};
	propertyTypes.forEach(function (propertyType) {
		assert(Class.prototype[propertyType.name] === undefined, 'Property name ' + propertyType.name + ' clashes');
		Class._propertyTypesByName[propertyType.name] = propertyType;
		Object.defineProperty(Class.prototype, propertyType.name, {
			get: function get() {
				return this._properties[propertyType.name].value;
			},
			set: function set(value) {
				this._properties[propertyType.name].value = value;
			}
		});
	});
};

var componentClasses = new Map();

// Instance of a component, see componentExample.js
var Component = (function (PropertyOwner$$1) {
	function Component(componentData, entity, env) {
		PropertyOwner$$1.call(this, 'com');
		this.entity = entity;
		this.env = env;
		this.children = {}; // TODO: create children
		this._componentData = componentData;
	}

	if ( PropertyOwner$$1 ) Component.__proto__ = PropertyOwner$$1;
	Component.prototype = Object.create( PropertyOwner$$1 && PropertyOwner$$1.prototype );
	Component.prototype.constructor = Component;
	Component.prototype.delete = function delete$1 () {
		assert(!this.env.entity.alive, 'Do not call Component.delete!');
		PropertyOwner$$1.prototype.delete.call(this);
	};
	Component.prototype._preInit = function _preInit () {
		var this$1 = this;

		this.constructor.requirements.forEach(function (r) {
			this$1[r] = this$1.entity.getComponent(r);
			assert(this$1[r], 'required component not found');
		});

		this._forEachChildComponent(function (c) { return c._preInit(); });
	
		try {
			if (typeof this.preInit === 'function')
				{ this.preInit(); }
		} catch(e) {
			console.error(this.entity, this.constructor.componentName, 'preInit', e);
		}
	};
	Component.prototype._init = function _init () {
		this._forEachChildComponent(function (c) { return c._init(); });
		try {
			if (typeof this.init === 'function')
				{ this.init(); }
		} catch(e) {
			console.error(this.entity, this.constructor.componentName, 'init', e);
		}
	};
	Component.prototype._sleep = function _sleep () {
		try {
			if (typeof this.sleep === 'function')
				{ this.sleep(); }
		} catch(e) {
			console.error(this.entity, this.constructor.componentName, 'sleep', e);
		}
		this._forEachChildComponent(function (c) { return c._sleep(); });
	};
	Component.prototype._forEachChildComponent = function _forEachChildComponent (func) {
		var this$1 = this;

		Object.keys(this.children).forEach(function (key) {
			var child = this$1.children[key];
			if (Array.isArray(child)) {
				child.forEach(func);
			} else {
				func(child);
			}
		});
	};
	Component.prototype.toJSON = function toJSON () {
		return Object.assign(PropertyOwner$$1.prototype.toJSON.call(this), {
			n: this.constructor.componentName
		});
	};

	return Component;
}(PropertyOwner));

Component.reservedPropertyNames = new Set(['id', 'constructor', 'delete', 'children', 'entity', 'env', 'init', 'preInit', 'sleep', '_preInit', '_init', '_sleep', '_forEachChildComponent', '_properties', '_componentData', 'toJSON', 'fromJSON']);
Component.reservedPrototypeMembers = new Set(['id', 'children', 'entity', 'env', '_preInit', '_init', '_sleep', '_forEachChildComponent', '_properties', '_componentData', 'toJSON', 'fromJSON']);
Component.register = function(ref) {
	var name = ref.name; if ( name === void 0 ) name = '';
	var description = ref.description; if ( description === void 0 ) description = '';
	var category = ref.category; if ( category === void 0 ) category = 'Other';
	var icon = ref.icon; if ( icon === void 0 ) icon = 'fa-puzzle-piece';
	var color = ref.color; if ( color === void 0 ) color = '';
	var properties = ref.properties; if ( properties === void 0 ) properties = [];
	var requirements = ref.requirements; if ( requirements === void 0 ) requirements = [];
	var children = ref.children; if ( children === void 0 ) children = [];
	var parentClass = ref.parentClass; if ( parentClass === void 0 ) parentClass = Component;
	var prototype = ref.prototype; if ( prototype === void 0 ) prototype = {};

	assert(name, 'Component must have a name.');
	assert(!componentClasses.has(name), 'Duplicate component class ' + name);
	Object.keys(prototype).forEach(function (k) {
		if (Component.reservedPrototypeMembers.has(k))
			{ assert(false, 'Component prototype can not have a reserved member: ' + k); }
	});
	
	var constructorFunction = prototype.constructor;
	var deleteFunction = prototype.delete;
	delete prototype.constructor;
	delete prototype.delete;
	var Class = (function (parentClass) {
		function Class() {
			parentClass.apply(this, arguments);
			if (constructorFunction)
				{ constructorFunction(); }
		}

		if ( parentClass ) Class.__proto__ = parentClass;
		Class.prototype = Object.create( parentClass && parentClass.prototype );
		Class.prototype.constructor = Class;
		Class.prototype.delete = function delete$1 () {
			parentClass.prototype.delete.apply(this, arguments);
			if (deleteFunction)
				{ deleteFunction(); }
		};

		return Class;
	}(parentClass));
	properties.forEach(function (p) {
		assert(!Component.reservedPropertyNames.has(p.name), 'Can not have property called ' + p.name);
	});
	PropertyOwner.defineProperties(Class, properties); // properties means propertyTypes here
	Class.componentName = name;
	Class.category = category;
	Class.requirements = requirements;
	Class.children = children;
	Class.description = description;
	Class.icon = icon;
	
	var num = name.split('').reduce(function (prev, curr) { return prev + curr.charCodeAt(0); }, 0);
	Class.color = color || ("hsla(" + (num % 360) + ", 40%, 60%, 1)");
	
	Object.assign(Class.prototype, prototype);
	componentClasses.set(Class.componentName, Class);
	return Class;
};

Component.register({
	name: 'Position',
	category: 'Core',
	icon: 'fa-dot-circle-o',
	properties: [
		createPropertyType('x', 0.1, createPropertyType.float),
		createPropertyType('y', 0.2, createPropertyType.float)
	]
});

var vari = 0;

Component.register({
	name: 'Test',
	category: 'Core',
	properties: [
		createPropertyType('name', 'Oh right', createPropertyType.string),
		createPropertyType('number', 666, createPropertyType.float),
		createPropertyType('vec', new Victor(0, 1), createPropertyType.vector),
		createPropertyType('test' + ++vari, vari, createPropertyType.float),
		createPropertyType('test' + ++vari, vari, createPropertyType.float, createPropertyType.float.range(4, 40)),
		createPropertyType('test' + ++vari, vari, createPropertyType.float)
	]
});

var ComponentData = (function (Serializable$$1) {
	function ComponentData(componentClassName, predefinedId, predefinedComponentId) {
		if ( predefinedId === void 0 ) predefinedId = false;
		if ( predefinedComponentId === void 0 ) predefinedComponentId = false;

		this.name = componentClassName;
		this.componentClass = componentClasses.get(this.name);
		assert(this.componentClass, 'Component class not defined: ' + componentClassName);
		Serializable$$1.call(this, predefinedId);
		this.componentId = predefinedComponentId || createStringId('cid', 10); // what will be the id of component created from this componentData
	}

	if ( Serializable$$1 ) ComponentData.__proto__ = Serializable$$1;
	ComponentData.prototype = Object.create( Serializable$$1 && Serializable$$1.prototype );
	ComponentData.prototype.constructor = ComponentData;
	ComponentData.prototype.addChild = function addChild (child) {
		if (child.threeLetterType === 'prp') {
			if (!child.propertyType) {
				if (!this.componentClass._propertyTypesByName[child.name]) {
					console.log('Property of that name not defined', this.id, child, this);
					return;
				}
				child.setPropertyType(this.componentClass._propertyTypesByName[child.name]);
			}
		}
		Serializable$$1.prototype.addChild.call(this, child);
	};
	ComponentData.prototype.clone = function clone () {
		var obj = new ComponentData(this.name);
		var children = [];
		this.forEachChild(null, function (child) {
			children.push(child.clone());
		});
		obj.addChildren(children);
		return obj;
	};
	ComponentData.prototype.toJSON = function toJSON () {
		return Object.assign(Serializable$$1.prototype.toJSON.call(this), {
			cid: this.componentId,
			n: this.name
		});
	};
	/*
	Returns a list of Properties.
	Those which don't have an id are temporary properties generated from parents.
	Don't set _depth.
	 */
	ComponentData.prototype.getInheritedProperties = function getInheritedProperties (_depth) {
		if ( _depth === void 0 ) _depth = 0;

		var properties = {};

		// properties from parent
		var parentComponentData = this.getParentComponentData();
		if (parentComponentData)
			{ parentComponentData.getInheritedProperties(_depth + 1).forEach(function (prop) { return properties[prop.name] = prop; }); }
		
		// properties from this. override properties of parents
		this.getChildren('prp').forEach(function (prop) {
			if (_depth === 0)
				{ properties[prop.name] = prop; }
			else
				{ properties[prop.name] = prop.clone(true); }
		});
		
		// fill from propertyType
		if (_depth === 0) {
			return this.componentClass._propertyTypes.map(function (propertyType) {
				return properties[propertyType.name] || propertyType.createProperty({
					skipSerializableRegistering: true
				});
			});
		} else {
			return Object.keys(properties).map(function (key) { return properties[key]; });
		}
	};
	ComponentData.prototype.getParentComponentData = function getParentComponentData () {
		var this$1 = this;

		if (!this._parent) { return null; }
		var parentPrototype = this._parent.getParent();
		while (parentPrototype) {
			var parentComponentData = parentPrototype.findChild('cda', function (componentData) { return componentData.componentId === this$1.componentId; });
			if (parentComponentData)
				{ return parentComponentData; }
			else
				{ parentPrototype = parentPrototype.getParent(); }
		}
		return null;
	};
	ComponentData.prototype.getValue = function getValue (name) {
		var property = this.properties[name];
		if (property) { return property.value; }
		
		var propertyType = componentClasses.get(this.componentClassName).propertyTypeMap.get(name);
		assert(classDef, '');
		if (classDef) { return classDef.propertyTypeMap.get(name); }
		
		return property && property.value
			|| componentClasses.get(this.componentClassName).propertyTypeMap.get(name).initialValue
			|| assert(false, 'Value of this name does not exist in this');
		if (property) { return property.value; }
		
		
		
		// return property && property.value || this.componentClass.propertyTypes.;
		return this.properties[name] || this.parent && this.parent.getProperty(name) || null;
	};

	return ComponentData;
}(Serializable));

Serializable.registerSerializable(ComponentData, 'cda', function (json) {
	return new ComponentData(json.n, json.id, json.cid);
});

var propertyTypes$1 = [
	createPropertyType('name', 'No name', createPropertyType.string)
];

var Prototype = (function (PropertyOwner$$1) {
	function Prototype () {
		PropertyOwner$$1.apply(this, arguments);
	}

	if ( PropertyOwner$$1 ) Prototype.__proto__ = PropertyOwner$$1;
	Prototype.prototype = Object.create( PropertyOwner$$1 && PropertyOwner$$1.prototype );
	Prototype.prototype.constructor = Prototype;

	Prototype.prototype.getInheritedComponentDatas = function getInheritedComponentDatas () {
		var originalPrototype = this;
		
		function getDataFromPrototype(prototype, _depth) {
			if ( _depth === void 0 ) _depth = 0;

			var data;
			
			if (prototype._parent && prototype._parent.threeLetterType === 'prt')
				{ data = getDataFromPrototype(prototype._parent, _depth + 1); }
			else
				{ data = {}; } // Top level
			
			var componentDatas = prototype.getChildren('cda');
			componentDatas.forEach(function (componentData) {
				if (!data[componentData.componentId]) {
					// Most parent version of this componentId
					data[componentData.componentId] = {
						// ownComponent = true if the original prototype is the first one introducing this componentId
						ownComponentData: null, // will be given value if original prototype has this componentId
						componentClass: componentData.componentClass,
						componentId: componentData.componentId,
						propertyHash: {},
						threeLetterType: 'icd',
						generatedForPrototype: originalPrototype
					};
				}
				if (_depth === 0) {
					data[componentData.componentId].ownComponentData = componentData;
				}

				componentData.getChildren('prp').forEach(function (property) {
					// Newest version of a property always overrides old property
					data[componentData.componentId].propertyHash[property.name] = _depth === 0 ? property : property.clone(true);
				});
			});
			
			return data;
		}

		var data = getDataFromPrototype(this);
		var array = Object.keys(data).map(function (key) { return data[key]; });
		array.forEach(function (inheritedComponentData) {
			inheritedComponentData.properties = inheritedComponentData.componentClass._propertyTypes.map(function (propertyType) {
				if (inheritedComponentData.propertyHash[propertyType.name])
					{ return inheritedComponentData.propertyHash[propertyType.name]; }
				else
					{ return propertyType.createProperty({ skipSerializableRegistering: true }); }
			});
			delete inheritedComponentData.propertyHash;
		});
		
		array.forEach(function (inheritedComponentData) {
			var cid = inheritedComponentData.componentId;
		});

		return array.sort(function (a, b) { return a.componentClass.componentName.localeCompare(b.componentClass.componentName); });
	};
	
	Prototype.prototype.createAndAddPropertyForComponentData = function createAndAddPropertyForComponentData (inheritedComponentData, propertyName, propertyValue) {
		var propertyType = inheritedComponentData.componentClass._propertyTypesByName[propertyName];
		assert(propertyType, 'Invalid propertyName', propertyName, inheritedComponentData);
		var componentData = this.findChild('cda', function (componentData) { return componentData.componentId === inheritedComponentData.componentId; });
		console.log('find', inheritedComponentData.componentId);
		if (!componentData) {
			console.log('no component data. create one', this, inheritedComponentData);
			componentData = new ComponentData(inheritedComponentData.componentClass.componentName, false, inheritedComponentData.componentId);
			this.addChild(componentData);
		}
		var property = componentData.findChild('prp', function (property) { return property.name === propertyName; });
		console.log('finding', propertyName);
		if (property) {
			console.log('yes property. update it', propertyValue);
			property.value = propertyValue;
			return property;
		}

		console.log('no property. create one', propertyType, propertyValue);

		property = propertyType.createProperty({
			value: propertyValue,
		});
		componentData.addChild(property);
		
		return property;
	};
	
	Prototype.prototype.findComponentDataByComponentId = function findComponentDataByComponentId (componentId, alsoFindFromParents) {
		if ( alsoFindFromParents === void 0 ) alsoFindFromParents = false;

		var child = this.findChild('cda', function (componentData) { return componentData.componentId === componentId; });
		if (child)
			{ return child; }
		if (this._parent)
			{ return this._parent.findComponentDataByComponentId(componentId, alsoFindFromParents); }
		else
			{ return null; }
	};

	return Prototype;
}(PropertyOwner));

PropertyOwner.defineProperties(Prototype, propertyTypes$1);

Prototype.create = function(name) {
	return new Prototype().initWithPropertyValues({ name: name });
};

Serializable.registerSerializable(Prototype, 'prt');

var propertyTypes = [
	createPropertyType('name', 'No name', createPropertyType.string)
];

var Game = (function (PropertyOwner$$1) {
	function Game () {
		PropertyOwner$$1.apply(this, arguments);
	}if ( PropertyOwner$$1 ) Game.__proto__ = PropertyOwner$$1;
	Game.prototype = Object.create( PropertyOwner$$1 && PropertyOwner$$1.prototype );
	Game.prototype.constructor = Game;

	

	return Game;
}(PropertyOwner));

PropertyOwner.defineProperties(Game, propertyTypes);

Game.create = function(name) {
	return new Game().initWithPropertyValues({ name: name });
};

Serializable.registerSerializable(Game, 'gam');

var ALIVE_ERROR = 'entity is already dead';

var Entity = (function (Serializable$$1) {
	function Entity() {
		Serializable$$1.call(this, 'ent');
		this.components = new Map(); // name -> array
		this.alive = true;
		this.sleeping = false;
		this.prototype = null;
	}

	if ( Serializable$$1 ) Entity.__proto__ = Serializable$$1;
	Entity.prototype = Object.create( Serializable$$1 && Serializable$$1.prototype );
	Entity.prototype.constructor = Entity;

	// Get the first component of given name
	Entity.prototype.getComponent = function getComponent (name) {
		assert(this.alive, ALIVE_ERROR);
		var components = this.components.get(name);
		if (components !== undefined)
			{ return components[0]; }
		else
			{ return null; }
	};

	// Get all components with given name
	Entity.prototype.getComponents = function getComponents (name) {
		assert(this.alive, ALIVE_ERROR);
		return this.components.get(name) || [];
	};

	/*
	Adds multiple components as an array to this Entity.
	Uses addComponent internally.
	Initializes components after all components are added.
	*/
	Entity.prototype.addComponents = function addComponents (components) {
		var this$1 = this;

		assert(this.alive, ALIVE_ERROR);
		assert(Array.isArray(components), 'Parameter is not an array.');

		for (var i = 0; i < components.length; i++) {
			var componentList = this$1.components.get(components[i].name) || this$1.components.set(components[i].name, []).get(components[i].name);
			componentList.push(components[i]);
		}
		
		if (!this.sleeping)
			{ Entity.initComponents(components); }
		return this;
	};
	Entity.initComponents = function initComponents (components) {
		for (var i = 0; i < components.length; i++)
			{ components[i]._preInit(); }
		for (var i$1 = 0; i$1 < components.length; i$1++)
			{ components[i$1]._init(); }
	};
	Entity.makeComponentsSleep = function makeComponentsSleep (components) {
		for (var i = 0; i < components.length; i++)
			{ components[i]._sleep(); }
	};
	Entity.deleteComponents = function deleteComponents (components) {
		for (var i = 0; i < components.length; i++)
			{ components[i].delete(); }
	};
	Entity.prototype.sleep = function sleep () {
		var this$1 = this;

		assert(this.alive, ALIVE_ERROR);
		if (this.sleeping) { return false; }
		
		for (var i = 0, list = this$1.components; i < list.length; i += 1)
			{
			var componentArray = list[i];

			Entity.makeComponentsSleep(componentArray);
		}
		
		this.sleeping = true;
		return true;
	};
	Entity.prototype.wakeUp = function wakeUp () {
		var this$1 = this;

		assert(this.alive, ALIVE_ERROR);
		if (!this.sleeping) { return false; }

		for (var i = 0, list = this$1.components; i < list.length; i += 1)
			{
			var componentArray = list[i];

			Entity.initComponents(componentArray);
		}

		this.sleeping = false;
		return true;
	};
	Entity.prototype.delete = function delete$1 () {
		var this$1 = this;

		assert(this.alive, ALIVE_ERROR);
		this.sleep();
		Serializable$$1.prototype.delete.call(this);
		this.alive = false;
		for (var i = 0, list = this$1.components; i < list.length; i += 1)
			{
			var componentArray = list[i];

			Entity.deleteComponents(componentArray);
		}
		this.components.clear();
	};
	Entity.prototype.toJSON = function toJSON () {
		assert(this.alive, ALIVE_ERROR);
		return Object.assign(Serializable$$1.prototype.toJSON.call(this), {
			components: []
		});
	};

	return Entity;
}(Serializable));

Serializable.registerSerializable(Entity, 'ent', function (json) {
	return new Entity(json.id);
});

(function () {
	var S = (function (Serializable$$1) {
		function S () {
			Serializable$$1.apply(this, arguments);
		}if ( Serializable$$1 ) S.__proto__ = Serializable$$1;
		S.prototype = Object.create( Serializable$$1 && Serializable$$1.prototype );
		S.prototype.constructor = S;

		

		return S;
	}(Serializable));
	Serializable.registerSerializable(S, 'tes', function (json) {
		return new S(json.id);
	});
	var s = new S();
	var id = s.id;
	assert(typeof id === 'string' && id.length > 10);
	var json = s.toJSON();
	assert(json && typeof json === 'object' && typeof json.id === 'string');
	s.delete();
	s = Serializable.fromJSON(json);
	assert(typeof s.id === 'string' && s.id.length > 10 && s.id === id);
	s.delete();
	console.log('Serializable tests OK');
})();

(function () {
	var i = new Entity();
	assert(i.components.size === 0);
	assert(i.getComponent('moi') === null);
	assert(i.getComponents('moi').length === 0);
	i.delete();
	console.log('Entity tests OK');
})();

(function () {
	assert(createPropertyType.float.default().validate('4') === 4);
	assert(createPropertyType.float.range(0, 1).validate(3) === 1);
	console.log('PropertyType tests OK');
})();

// Export so that other components can have this component as parent
Component.register({
	name: 'Example',
	description: 'Description of what this component does',
	category: 'Core', // You can also make up new categories.
	icon: 'fa-bars', // Font Awesome id
	requirements: ['Position'], // These shared components are autofilled. Error if component is not found.
	children: ['Image', 'Image', 'Sound'], // These private components are also autofilled. Error if component is not found.
	properties: [
		createPropertyType('variable', 0.5, createPropertyType.float, createPropertyType.float.range(0, 1), 'Description of the property'),
		createPropertyType('otherVar_iaerfperfjoierj', 'Hello', createPropertyType.string, 'Description of the property')
	],
	parentClass: Component,
	prototype: {
		staticVariable: 'Example class info',
		constructor: function constructor() {
			// This will be called once, when creating the component
			this.hiddenVariable = 3;
		},
		preInit: function preInit() {
			// preInit is called for every component before any component is inited with init(). Children are already preInited here.
			this.data = {
				lotsOfData: 123 + this.variable + this.hiddenVariable
			};
		},
		init: function init() {
			// All the components of this entity has been preInited. You can use them. Children are already inited here.
			this.Position.x = this.Position.y + 1;

			this.howToAccessChildren = [
				this.children.Image[0].property,
				this.children.Sound.property
			];

			this.SomeComponent = this.entity.getComponent('SomeComponent');
		},
		sleep: function sleep() {
			// Release all the data created in preInit and init
			this.data = null;
			this.SomeComponent = null;
			this.howToAccessChildren = null;
			// Position component is automatically released because it is a requirement.
		},
		delete: function delete$1() {
			// This will be called once, when component stops existing
		}
	}
});

/*
 Global event system

 let unlisten = events.listen('event name', function(params, ...) {});
 eventManager.dispatch('event name', paramOrParamArray);
 unlisten();
 */

var listeners = {};

var events = {
	listen: function listen(event, callback) {
		if (!listeners.hasOwnProperty(event)) {
			listeners[event] = [];
		}
		listeners[event].push(callback);
		return function () {
			var index = listeners[event].indexOf(callback);
			listeners[event].splice(index, 1);
		};
	},
	dispatch: function dispatch(event) {
		var args = [], len = arguments.length - 1;
		while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

		if (listeners.hasOwnProperty(event)) {
			for (var i = 0; i < listeners[event].length; ++i) {
				listeners[event][i].apply(null, args);
				/*
				try {
					listeners[event][i].apply(null, args);
				} catch (e) {
					if (console && console.error) {
						console.error(e);
					}
				}
				*/
			}
		}
	}
};

var HASH = '#'.charCodeAt(0);
var DOT = '.'.charCodeAt(0);

function createElement (query, ns) {
  var tag;
  var id;
  var className;

  var mode = 0;
  var start = 0;

  for (var i = 0; i <= query.length; i++) {
    var char = query.charCodeAt(i);

    if (char === HASH || char === DOT || !char) {
      if (mode === 0) {
        if (i === 0) {
          tag = 'div';
        } else if (!char) {
          tag = query;
        } else {
          tag = query.substring(start, i);
        }
      } else {
        var slice = query.substring(start, i);

        if (mode === 1) {
          id = slice;
        } else if (className) {
          className += ' ' + slice;
        } else {
          className = slice;
        }
      }

      start = i + 1;

      if (char === HASH) {
        mode = 1;
      } else {
        mode = 2;
      }
    }
  }

  var element = ns ? document.createElementNS(ns, tag) : document.createElement(tag);

  if (id) {
    element.id = id;
  }

  if (className) {
    element.className = className;
  }

  return element;
}

function text (content) {
  return document.createTextNode(content);
}

function mount (parent, child, before) {
  var parentEl = parent.el || parent;
  var childEl = child.el || child;

  if (childEl.__redom_list) {
    childEl = childEl.el;
  }

  if (child === childEl && childEl.__redom_view) {
    // try to look up the view if not provided
    child = childEl.__redom_view;
  }

  if (child !== childEl) {
    childEl.__redom_view = child;
  }
  if (child.isMounted) {
    child.remount && child.remount();
  } else {
    child.mount && child.mount();
  }
  if (before) {
    parentEl.insertBefore(childEl, before.el || before);
  } else {
    parentEl.appendChild(childEl);
  }
  if (child.isMounted) {
    child.remounted && child.remounted();
  } else {
    child.isMounted = true;
    child.mounted && child.mounted();
  }
}

function unmount (parent, child) {
  var parentEl = parent.el || parent;
  var childEl = child.el || child;

  if (child === childEl && childEl.__redom_view) {
    // try to look up the view if not provided
    child = childEl.__redom_view;
  }

  child.unmount && child.unmount();

  parentEl.removeChild(childEl);

  child.isMounted = false;
  child.unmounted && child.unmounted();
}

var elcache = {};

function el (query) {
  var arguments$1 = arguments;

  var element;

  if (typeof query === 'string') {
    element = (elcache[query] || (elcache[query] = createElement(query))).cloneNode(false);
  } else if (query && query.nodeType) {
    element = query.cloneNode(false);
  } else {
    throw new Error('At least one argument required');
  }

  var empty = true;

  for (var i = 1; i < arguments.length; i++) {
    var arg = arguments$1[i];

    if (!arg) {
      continue;
    }

    // support middleware
    if (typeof arg === 'function') {
      arg(element);
    } else if (typeof arg === 'string' || typeof arg === 'number') {
      if (empty) {
        empty = false;
        element.textContent = arg;
      } else {
        element.appendChild(text(arg));
      }
    } else if (arg.nodeType || (arg.el && arg.el.nodeType)) {
      empty = false;
      mount(element, arg);
    } else if (arg.length) {
      empty = false;
      for (var j = 0; j < arg.length; j++) {
        mount(element, arg[j]);
      }
    } else if (typeof arg === 'object') {
      for (var key in arg) {
        var value = arg[key];

        if (key === 'style') {
          if (typeof value === 'string') {
            element.setAttribute(key, value);
          } else {
            for (var cssKey in value) {
              element.style[cssKey] = value[cssKey];
            }
          }
        } else if (key in element || typeof value === 'function') {
          element[key] = value;
        } else {
          element.setAttribute(key, value);
        }
      }
    }
  }

  return element;
}

el.extend = function (query) {
  var clone = (elcache[query] || (elcache[query] = createElement(query)));

  return el.bind(this, clone);
};

function setChildren (parent, children) {
  var parentEl = parent.el || parent;
  var traverse = parentEl.firstChild;

  for (var i = 0; i < children.length; i++) {
    var child = children[i];

    if (!child) {
      continue;
    }

    var childEl = child.el || child;

    if (childEl === traverse) {
      traverse = traverse.nextSibling;
      continue;
    }

    mount(parent, child, traverse);
  }

  while (traverse) {
    var next = traverse.nextSibling;

    unmount(parent, traverse);

    traverse = next;
  }
}

function list (parent, View, key, initData) {
  return new List(parent, View, key, initData);
}

function List (parent, View, key, initData) {
  this.__redom_list = true;
  this.View = View;
  this.key = key;
  this.initData = initData;
  this.views = [];
  this.el = typeof parent === 'string' ? el(parent) : parent;

  if (key) {
    this.lookup = {};
  }
}

List.extend = function (parent, View, key, initData) {
  return List.bind(List, parent, View, key, initData);
};

list.extend = List.extend;

List.prototype.update = function (data) {
  if ( data === void 0 ) { data = []; }

  var View = this.View;
  var key = this.key;
  var functionKey = typeof key === 'function';
  var initData = this.initData;
  var newViews = new Array(data.length);
  var oldViews = this.views;
  var newLookup = key && {};
  var oldLookup = key && this.lookup;

  for (var i = 0; i < data.length; i++) {
    var item = data[i];
    var view = (void 0);

    if (key) {
      var id = functionKey ? key(item) : item[key];
      view = newViews[i] = oldLookup[id] || new View(initData, item, i, data);
      newLookup[id] = view;
      view.__id = id;
    } else {
      view = newViews[i] = oldViews[i] || new View(initData, item, i, data);
    }
    var el$$1 = view.el;
    if (el$$1.__redom_list) {
      el$$1 = el$$1.el;
    }
    el$$1.__redom_view = view;
    view.update && view.update(item, i, data);
  }

  setChildren(this, newViews);

  if (key) {
    this.lookup = newLookup;
  }
  this.views = newViews;
};

var Router = function Router (parent, Views) {
  this.el = typeof parent === 'string' ? el(parent) : parent;
  this.Views = Views;
};
Router.prototype.update = function update (route, data) {
  if (route !== this.route) {
    var Views = this.Views;
    var View = Views[route];

    this.view = View && new View();
    this.route = route;

    setChildren(this.el, [ this.view ]);
  }
  this.view && this.view.update && this.view.update(data);
};

var ModuleContainer = function ModuleContainer(moduleContainerName, packButtonIcon) {
	var this$1 = this;
	if ( moduleContainerName === void 0 ) moduleContainerName = 'unknownClass.anotherClass';
	if ( packButtonIcon === void 0 ) packButtonIcon = 'fa-chevron-left';

		
	this.modules = [];
	this.packButtonEnabled = !!packButtonIcon;
	this.el = el(("div.moduleContainer.packable." + moduleContainerName),
		this.packButton = packButtonIcon && el(("i.packButton.button.iconButton.fa." + packButtonIcon)),
		this.tabs = list('div.tabs', ModuleTab),
		this.moduleElements = el('div.moduleElements')
	);
	if (packButtonIcon) {
		this.el.onclick = function () { return this$1.el.classList.contains('packed') && this$1.el.classList.remove('packed'); };
		this.packButton.onclick = function (e) {
			this$1.el.classList.add('packed');
			e.stopPropagation();
		};
	}

	events.listen('registerModule_' + moduleContainerName.split('.')[0], function (moduleClass, editor) {
		var module = new moduleClass(editor);
		module.editor = editor;
		module.state = editor.state;
		module.el.classList.add('module-' + module.id);
		this$1.modules.push(module);
		if (this$1.modules.length !== 1) {
			module._hide();
		}
		mount(this$1.moduleElements, module.el);
		this$1._updateTabs();
			
		events.listen('activateModule_' + module.id, function (unpackModuleView) {
			var args = [], len = arguments.length - 1;
			while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

			if ( unpackModuleView === void 0 ) unpackModuleView = true;
			if (unpackModuleView)
				{ this$1.el.classList.remove('packed'); }
			this$1._activateModule(module, args);
		});
	});
	this._updateTabs();
};
ModuleContainer.prototype.update = function update () {
	this.modules.forEach(function (m) { return m.update(); });
};
ModuleContainer.prototype._updateTabs = function _updateTabs () {
	if (!this.tabs) { return; }
		
	this.tabs.update(this.modules);
		
	if (!this.packButtonEnabled && this.modules.length <= 1)
		{ this.tabs.el.style.display = 'none'; }
	else
		{ this.tabs.el.style.display = 'block'; }
};
ModuleContainer.prototype._activateModule = function _activateModule (module, args) {
	var idx = this.modules.indexOf(module);
	this.modules.forEach(function (m) {
		if (m !== module) {
			m._hide();
		}
	});
	module.activate.apply(module, args);
	module._show();
	this._updateTabs();
		
	/*
	this.modules.splice(idx, 1);
	this.modules.unshift(module);
	this._updateTabs();
	for (let i = 1; i < this.modules.length; i++) {
		this.modules[i].el.style.display = 'none';
	}
	module.activate(...args);
	module.el.style.display = 'block';
	*/
};

var ModuleTab = function ModuleTab() {
	var this$1 = this;

	this.el = el('span.moduleTab.button');
	this.module = null;
	this.el.onclick = function () {
		events.dispatch('activateModule_' + this$1.module.id);
	};
};
ModuleTab.prototype.update = function update (module) {
	this.module = module;
	this.el.textContent = module.name;
	this.el.classList.toggle('active', module._visible);
};

var Layout = function Layout() {
	var this$1 = this;

	this.moduleContainers = [];
	var addContainer = function () {
		var args = [], len = arguments.length;
		while ( len-- ) args[ len ] = arguments[ len ];

		var container = new (Function.prototype.bind.apply( ModuleContainer, [ null ].concat( args) ));
		this$1.moduleContainers.push(container);
		return container;
	};
	this.el = el('div.editorLayout',
		el('div.nonRight',
			addContainer('top', null),
			el('div.bottomLeft',
				addContainer('left', 'fa-chevron-left'),
				el('div.middle',
					addContainer('center', null),
					addContainer('bottom', 'fa-chevron-down')
				)
			)
		),
		addContainer('right', 'fa-chevron-right')
	);
};
Layout.prototype.update = function update (state) {
	this.moduleContainers.forEach(function (mc) { return mc.update(state); });
};

var Module = function Module() {
	var i = arguments.length, argsArray = Array(i);
	while ( i-- ) argsArray[i] = arguments[i];

	this.name = this.name || 'Module';
	this.id = this.id || 'module';
	this.el = el.apply(void 0, [ 'div.module' ].concat( argsArray ));
	this._visible = true;
};
// Called when this module is opened. Other modules can call Module.activateModule('Module', ...args);
Module.prototype.activate = function activate () {
};
// Called when state of editor changes
Module.prototype.update = function update () {
};
Module.prototype._show = function _show () {
	this.el.classList.remove('hidden');
	this._visible = true;
};
Module.prototype._hide = function _hide () {
	this.el.classList.add('hidden');
	this._visible = false;
};

//arguments: moduleName, unpackModuleView=true, ...args 
Module.activateModule = function(moduleName, unpackModuleView) {
	var args = [], len = arguments.length - 2;
	while ( len-- > 0 ) args[ len ] = arguments[ len + 2 ];

	if ( unpackModuleView === void 0 ) unpackModuleView=true;
	events.dispatch.apply(events, [ 'activateModule_' + moduleName, unpackModuleView ].concat( args ));
};
Module.packModuleContainer = function(moduleContainerName) {
	document.querySelectorAll((".moduleContainer." + moduleContainerName))[0].classList.add('packed');
};
Module.unpackModuleContainer = function(moduleContainerName) {
	document.querySelectorAll((".moduleContainer." + moduleContainerName))[0].classList.remove('packed');
};

// moduleContainerName = left | middle | right | bottom
Module.register = function(moduleClass, moduleContainerName) {
	registerPromise = registerPromise.then(function (editor) {
		events.dispatch('registerModule_' + moduleContainerName, moduleClass, editor);
		return editor;
	});
};

var nextTopBarPriorityNumber = 1;
Module.registerTopButton = function(text$$1, icon, func, priority) {
	if ( priority === void 0 ) priority = nextTopBarPriorityNumber++;

	registerPromise = registerPromise.then(function (editor) {
		events.dispatch('registerTopButton', text$$1, icon, func, priority);
		return editor;
	});
};


var registerPromise = new Promise(function(resolve) {
	events.listen('registerModules', function(editor) {
		registerPromise.then(function (editor) {
			events.dispatch('modulesRegistered');
			return editor;
		});
		resolve(editor);
	});
});

var TopBarModule = (function (Module$$1) {
	function TopBarModule() {
		Module$$1.call(
			this, this.logo = el('img.logo.button.iconButton', { src: '../img/logo_reflection_medium.png' }),
			this.list = list('div.buttonContainer', TopButton)
		);
		this.id = 'topbar';
		this.name = 'TopBar'; // not visible
	}

	if ( Module$$1 ) TopBarModule.__proto__ = Module$$1;
	TopBarModule.prototype = Object.create( Module$$1 && Module$$1.prototype );
	TopBarModule.prototype.constructor = TopBarModule;
	TopBarModule.prototype.update = function update () {
		this.list.update(this.state.topButtons);
	};

	return TopBarModule;
}(Module));
Module.register(TopBarModule, 'top');

Module.registerTopButton('Bell Types', 'fa fa-bell-o', function () { 
	Module.unpackModuleContainer('bottom');
	Module.activateModule('types');
	Module.activateModule('type');
}, 1);
Module.registerTopButton('Cube Instances', 'fa fa-cubes', function () {
	Module.activateModule('instances');
	Module.activateModule('instance');
}, 2);

var TopButton = function TopButton() {
	var this$1 = this;

	this.el = el('div.button.topIconTextButton',
		el('div.topIconTextButtonContent',
			this.icon = el('i.fa'),
			this.text = el('span')
		)
	);
	this.el.onclick = function () {
		this$1.callback && this$1.callback();
	};
	this.callback = null;
};
TopButton.prototype.update = function update (state) {
	this.icon.className = state.icon;
	this.text.textContent = state.text;
	this.callback = state.func;
};

var popupDepth = 0;

function showPopup(ref) {
	var text$$1 = ref.text; if ( text$$1 === void 0 ) text$$1 = '';
	var buttons = ref.buttons; if ( buttons === void 0 ) buttons = [];
	var cancelCallback = ref.cancelCallback; if ( cancelCallback === void 0 ) cancelCallback = null;
	var width = ref.width; if ( width === void 0 ) width = null;

	var popup = new Popup(text$$1, buttons, cancelCallback);
	if (width)
		{ popup.el.style.width = Math.ceil(width) + 'px'; }
	popupDepth++;
	mount(document.body, popup);
}

var Popup = function Popup(text$$1, buttons, cancelCallback) {
	this.el = el('div.popup', { style: { 'z-index': 1000 + popupDepth } },
		new Layer(this),
		el('div.popupContent',
			this.text = el('div.popupText', text$$1),
			this.buttons = list('div.popupButtons', Button, null, this)
		)
	);
	this.buttons.update(buttons);
	this.cancelCallback = cancelCallback;
};
Popup.prototype.remove = function remove () {
	popupDepth--;
	this.el.parentNode.removeChild(this.el);
};

var Button = function Button(popup) {
	var this$1 = this;

	this.el = el('button.button', {onclick: function () {
		popup.remove();
		this$1.callback();
	}});
};
Button.prototype.update = function update (button) {
	this.el.textContent = button.text;
	this.callback = button.callback;
};

var Layer = function Layer(popup) {
	this.el = el('div.popupLayer', { onclick: function () {
		popup.remove();
		popup.cancelCallback && popup.cancelCallback();
	} });
};

/*
Reference: Unbounce
 https://cdn8.webmaster.net/pics/Unbounce2.jpg
 */

var PropertyEditor = function PropertyEditor(editor) {
	this.el = el('div.propertyEditor');
	this.editor = editor;
};
PropertyEditor.prototype.update = function update (selection) {
	$(this.el).empty();
	if (selection.type === 'prt' && selection.items.length === 1) {
		var prototypeEditor = new Container(this.editor);
		prototypeEditor.update(selection.items[0]);
		mount(this.el, prototypeEditor);
	}
};

var Container = function Container(editor) {
	var this$1 = this;

	this.el = el('div.container',
		this.title = el('div.containerTitle'),
		el('div.containerContent',
			this.properties = list('table', Property$2, null, editor),
			this.containers = list('div', Container, null, editor),
			this.controls = el('div')
		)
	);
	this.editor = editor;
	this.titleClickedCallback = null;
	this.title.onclick = function () {
		this$1.titleClickedCallback && this$1.titleClickedCallback();
	};
};
Container.prototype.update = function update (state) {
	this.item = state;
	this.el.setAttribute('type', this.item.threeLetterType);
	this.controls.innerHTML = '';
	this.titleClickedCallback = null;

	if (this.item.threeLetterType === 'prt') { this.updatePrototype(); }
	else if (this.item.threeLetterType === 'icd') { this.updateInheritedComponentData(); }
};
Container.prototype.updatePrototype = function updatePrototype () {
		var this$1 = this;

	var inheritedComponentDatas = this.item.getInheritedComponentDatas();
	this.containers.update(inheritedComponentDatas);
	this.properties.update(this.item.getChildren('prp'));
	mount(this.controls, el('button.button', 'Add component', {
		onclick: function () {
			var buttons = Array.from(this$1.editor.state.componentClasses.values()).map(function (c) { return ({
				text: c.componentName,
				callback: function () {
					this$1.item.addChild(new ComponentData(c.componentName));
					this$1.editor.update();
					this$1.editor.save();
				}
			}); });
			showPopup({
				text: 'Add component',
				buttons: buttons
			});
		}
	}));
	mount(this.controls, el('button.button', 'Clone type', { onclick: function () {
		var clone = this$1.item.clone();
		clone.name += ' clone';
		this$1.item.getParent().addChild(clone);
		this$1.editor.update();
		this$1.editor.save();
	} }));
	mount(this.controls, el('button.dangerButton.button', 'Delete type', { onclick: function () {
		this$1.item.delete();
		this$1.editor.update();
		this$1.editor.save();
	} }));
};
Container.prototype.updateInheritedComponentData = function updateInheritedComponentData () {
		var this$1 = this;

	this.title.textContent = this.item.componentClass.componentName;
	var icon = el('i.icon.fa.' + this.item.componentClass.icon);
	mount(this.title, icon);
	this.title.style.color = this.item.componentClass.color;
	this.el.style['border-color'] = this.item.componentClass.color;
		
	var packId = this.item.generatedForPrototype.id + this.item.componentId;
		
	var packedStatus = this.editor.getPackedComponent(packId);
	if (packedStatus === true) {
		this.el.classList.add('packed');
	} else if (packedStatus === false) {
		this.el.classList.remove('packed');
	} else {
		this.el.classList.toggle('packed', !this.item.ownComponentData);
	}
		
	this.titleClickedCallback = function () {
		this$1.el.classList.toggle('packed');
		this$1.editor.setPackedComponent(packId, this$1.el.classList.contains('packed'));
	};
		
	var parentComponentData = this.item.ownComponentData && this.item.ownComponentData.getParentComponentData();
	var hasOwnProperties = false;
	this.item.properties.forEach(function (prop) {
		if (prop.id)
			{ hasOwnProperties = true; }
		else
			{ prop.editorParent = this$1.item; }
	});
	this.properties.update(this.item.properties);
		
	if (!this.item.ownComponentData || parentComponentData) {
		mount(this.controls, el('button.button', 'Show parent', {
			onclick: function () {
				var componentData = this$1.item.generatedForPrototype.findComponentDataByComponentId(this$1.item.componentId, true);
				this$1.editor.select(componentData.getParent());
			}
		}));
	}
	if (this.item.ownComponentData) {
		mount(this.controls, el('button.button', 'Clone', {
			onclick: function () {
				var clone = this$1.item.ownComponentData.clone();
				this$1.item.generatedForPrototype.addChild(clone);
				this$1.editor.update();
				this$1.editor.save();
			}
		}));
	}
	if (hasOwnProperties) {
		mount(this.controls, el('button.dangerButton.button', 'Reset', {
			onclick: function () {
				if (this$1.item.ownComponentData.getParentComponentData()) {
					this$1.item.ownComponentData.delete();
				} else {
					this$1.item.ownComponentData.deleteChildren();
				}
				this$1.editor.update();
				this$1.editor.save();
			}
		}));
	}
	if (this.item.ownComponentData && !parentComponentData) {
		mount(this.controls, el('button.dangerButton.button', 'Delete', {
			onclick: function () {
				this$1.item.ownComponentData.delete();
				this$1.editor.update();
				this$1.editor.save();
			}
		}));
	}
};

var Property$2 = function Property(editor) {
	var this$1 = this;

	this.editor = editor;
	this.el = el('tr.property', { name: '' },
		this.name = el('td.nameCell'),
		this.content = el('td.propertyContent',
			this.input = el('input')
		)
	);
	this.input.oninput = function () {
		try {
			this$1.property.propertyType.validator.validate(this$1.input.value);
			this$1.input.removeAttribute('error');
		} catch(e) {
			this$1.input.setAttribute('error', 'true');
		}
	};
	this.input.onchange = function () {
		var originalValue = this$1.property.value;
		try {
			this$1.property.value = this$1.property.propertyType.validator.validate(this$1.input.value);
			if (!this$1.property.id) {
				console.log('no id, create new property', this$1.property);
				assert(this$1.property.editorParent);
				var proto = this$1.property.editorParent.generatedForPrototype;
				proto.createAndAddPropertyForComponentData(this$1.property.editorParent, this$1.property.name, this$1.property.value);
			}
			editor.update();
			editor.save();
		} catch(e) {
			console.log('Error while changing property value', this$1.property, this$1.input.value);
			this$1.property.value = originalValue;
			this$1.input.value = this$1.property.value;
		}
		this$1.input.removeAttribute('error');
	};
};
Property$2.prototype.update = function update (property) {
		var this$1 = this;

	this.property = property;
	this.el.setAttribute('name', property.name);
	this.name.textContent = property.propertyType.name;
	this.input.value = property.value;
	this.el.classList.toggle('ownProperty', !!this.property.id);
	if (this.property.id) {
		var parent = this.property.getParent();
		if (parent.threeLetterType === 'cda') {
			this.name.style.color = parent.componentClass.color;

			mount(this.content, el('i.fa.fa-window-close.button.removeButton.iconButton', {
				onclick: function () {
					var componentData = this$1.property.getParent();
					this$1.property.delete();
					if (componentData._children.size === 0) {
						if (componentData.getParentComponentData())
							{ componentData.delete(); }
					}
					this$1.editor.update();
					this$1.editor.save();
				}
			}));
		}
	} else
		{ this.name.style.color = 'inherit'; }
};

var PropertyModule = (function (Module$$1) {
	function PropertyModule(editor) {
		Module$$1.call(
			this, this.propertyEditor = new PropertyEditor(editor)
		);
		this.id = 'type';
		this.name = 'Type';
	}

	if ( Module$$1 ) PropertyModule.__proto__ = Module$$1;
	PropertyModule.prototype = Object.create( Module$$1 && Module$$1.prototype );
	PropertyModule.prototype.constructor = PropertyModule;
	PropertyModule.prototype.update = function update () {
		this.propertyEditor.update(this.state.selection);
		
		/*
		
		 
		this.componentClasses = this.state.componentClasses; 

		let schema = {
			editors: [
				{
					field: 'yks',
					title: 'YKS',
					type: 'text'
				}
			]
		};

		let data = {};

		let componentArray = Array.from(this.componentClasses.values());
		componentArray.forEach(c => {
			let componentSchema = {
				type: 'group',
				field: c.name,
				title: c.name,
				editors: c._propertyTypes.map(pm => ({
					field: c.name + '.' + pm.name,
					title: pm.name.length > 30 ? (pm.name.substring(0, 28) + '..') : pm.name,
					type: propertyTypeToEditorType[pm.type.name] || 'text'
				}))
			};
			schema.editors.push(componentSchema);

			let componentData = {};
			c._propertyTypes.forEach(pm => {
				componentData[pm.name] = pm.initialValue;
			});
			data[c.name] = componentData;
		});
		
		new PJS($(this.propertyEditor), schema, data);
		*/
	};

	return PropertyModule;
}(Module));

Module.register(PropertyModule, 'right');

var propertyTypeToEditorType$1 = {
	'float': 'number',
	'string': 'text'
};

var PropertyModule$1 = (function (Module$$1) {
	function PropertyModule() {
		Module$$1.call(
			this, this.propertyEditor = el('div.propertyEditor', 'hei')
		);
		this.id = 'instance';
		this.name = 'Instance';
	}

	if ( Module$$1 ) PropertyModule.__proto__ = Module$$1;
	PropertyModule.prototype = Object.create( Module$$1 && Module$$1.prototype );
	PropertyModule.prototype.constructor = PropertyModule;
	PropertyModule.prototype.update = function update () {
		this.componentClasses = this.state.componentClasses;

		var schema = {
			editors: [
				{
					field: 'yks',
					title: 'YKS',
					type: 'text'
				}
			]
		};

		var data = {};

		var componentArray = Array.from(this.componentClasses.values());
		componentArray.forEach(function (c) {
			var componentSchema = {
				type: 'group',
				field: c.name,
				title: c.name,
				editors: c._propertyTypes.map(function (pm) { return ({
					field: c.name + '.' + pm.name,
					title: pm.name.length > 30 ? (pm.name.substring(0, 28) + '..') : pm.name,
					type: propertyTypeToEditorType$1[pm.type.name] || 'text'
				}); })
			};
			schema.editors.push(componentSchema);

			var componentData = {};
			c._propertyTypes.forEach(function (pm) {
				componentData[pm.name] = pm.initialValue;
			});
			data[c.name] = componentData;
		});

		// new PJS($(this.propertyEditor), schema, data);
	};

	return PropertyModule;
}(Module));

Module.register(PropertyModule$1, 'right');

var SceneModule = (function (Module$$1) {
	function SceneModule() {
		Module$$1.call(
			this, this.content = el('span', 'moi test')
		);
		this.id = 'scene';
		this.name = 'Scene';
	}

	if ( Module$$1 ) SceneModule.__proto__ = Module$$1;
	SceneModule.prototype = Object.create( Module$$1 && Module$$1.prototype );
	SceneModule.prototype.constructor = SceneModule;
	SceneModule.prototype.update = function update () {
	};

	return SceneModule;
}(Module));

Module.register(SceneModule, 'center');

var Types = (function (Module$$1) {
	function Types() {
		var this$1 = this;

		Module$$1.call(
			this, this.addButton = el('span.addTypeButton.button.fa.fa-plus'),
			this.search = el('input'),
			this.searchIcon = el('i.fa.fa-search.searchIcon'),
			this.jstree = el('div')
		);
		this.id = 'types';
		this.name = 'Types';

		this.addButton.onclick = function () {
			this$1.state.game.addChild(Prototype.create('' + Math.random()));
			this$1.editor.update();
			this$1.editor.save();
		};
		
		var searchTimeout = false;
		this.search.addEventListener('keyup', function () {
			if (searchTimeout)
				{ clearTimeout(searchTimeout); }

			searchTimeout = setTimeout(function () {
				$(this$1.jstree).jstree().search(this$1.search.value.trim());
			}, 200);
		});
	}

	if ( Module$$1 ) Types.__proto__ = Module$$1;
	Types.prototype = Object.create( Module$$1 && Module$$1.prototype );
	Types.prototype.constructor = Types;
	Types.prototype.update = function update () {
		var this$1 = this;

		if (this.skipUpdate) { return; }
		
		var data = [];
		this.state.game.forEachChild('prt', function (prototype) {
			var parent = prototype.getParent();
			data.push({
				text: prototype.name,
				id: prototype.id,
				parent: parent.threeLetterType === 'prt' ? parent.id : '#'
			});
		}, true);
		
		if (!this.jstreeInited) {
			$(this.jstree).attr('id', 'types-jstree').on('changed.jstree', function (e, data) {
				// selection changed
				this$1.skipUpdate = true;
				this$1.editor.select(data.selected.map(getSerializable));
				this$1.skipUpdate = false;
			}).on('loaded.jstree refresh.jstree', function () {
				var jstree = $(this$1.jstree).jstree(true);
				// let selNode = jstree.get_node('prtF21ZLL0vsLdQI5z');
				// console.log(jstree, selNode);
				if (this$1.state.selection.type === 'none') {
					//jstree.select_node();
				}
				if (this$1.state.selection.type === 'prt') {
					// jstree.select_node(this.state.selection.items.map(i => i.id));
				}
			}).jstree({
				core: {
					check_callback: true,
					data: data,
					force_text: true
				},
				plugins: ['types', 'dnd', 'sort', 'search', 'state'],
				types: {
					default: {
						icon: 'fa fa-book'
					}
				},
				dnd: {
					copy: false // jstree makes it way too hard to copy multiple prototypes
				},
				search: {
					fuzzy: true,
					show_only_matches: true,
					show_only_matches_children: true,
					close_opened_onclear: false
				}
			});
			this.jstreeInited = true;
		} else {
			$(this.jstree).jstree(true).settings.core.data = data;
			$(this.jstree).jstree('refresh');
		}
		$(this.jstree).data('typesModule', this);
		
		// $(this.jstree).jstree(true).select_node($('#prtF21ZLL0vsLdQI5z')[0]);//this.state.selection.items.map(i => i.id));
		if (this.state.selection.type === 'none') {
		}
		// TODO: if selection changes somewhere else, follow
	};

	return Types;
}(Module));

$(document).on('dnd_stop.vakata', function (e, data) {
	var jstree = $('#types-jstree').jstree(true);
	var typesModule = $('#types-jstree').data('typesModule');
	
	setTimeout(function () {
		// Now the nodes have moved in the DOM.

		var node = jstree.get_node(data.data.obj);
		var nodes = data.data.nodes; // these prototypes will move
		var newParent;
		if (node.parent === '#')
			{ newParent = typesModule.state.game; }
		else
			{ newParent = getSerializable(node.parent); }
		
		var nodeObjects = nodes.map(getSerializable);
		nodeObjects.forEach(assert);
		nodeObjects.forEach(function (prototype) {
			newParent.addChild(prototype.detach());
		});
		
		// console.log('dnd stopped from', nodes, 'to', newParent);
		
		typesModule.editor.save();
	});
});

Module.register(Types, 'left');

var TestModule = (function (Module$$1) {
	function TestModule() {
		Module$$1.call(
			this, this.content = el('span', 'List of instances on the scene')
		);
		this.name = 'Instances';
		this.id = 'instances';
	}

	if ( Module$$1 ) TestModule.__proto__ = Module$$1;
	TestModule.prototype = Object.create( Module$$1 && Module$$1.prototype );
	TestModule.prototype.constructor = TestModule;
	TestModule.prototype.update = function update () {
	};

	return TestModule;
}(Module));

Module.register(TestModule, 'left');

var TestModule$1 = (function (Module$$1) {
	function TestModule() {
		Module$$1.call(
			this, this.content = el('span', 'This is test 3')
		);
		this.id = 'test';
		this.name = 'Test3';
	}

	if ( Module$$1 ) TestModule.__proto__ = Module$$1;
	TestModule.prototype = Object.create( Module$$1 && Module$$1.prototype );
	TestModule.prototype.constructor = TestModule;
	TestModule.prototype.update = function update () {
	};

	return TestModule;
}(Module));

Module.register(TestModule$1, 'bottom');

window.addEventListener('load', function () {
	var anotherGame;
	// anotherGame = Serializable.fromJSON(JSON.parse(localStorage.anotherGameJSON));
	try {
		anotherGame = Serializable.fromJSON(JSON.parse(localStorage.anotherGameJSON));
	} catch(e) {
		console.warn('game parsing failed', e);
	}
	editor = new Editor(anotherGame);
	events.dispatch('registerModules', editor);
});
events.listen('modulesRegistered', function () {
	editor.update();
	events.dispatch('loaded');
});

var editor = null;
var Editor = function Editor(game) {
	var this$1 = this;
	if ( game === void 0 ) game = Game.create('My Game');

	this.layout = new Layout();
		
	this.state = {
		topButtons: [],
		selection: {
			type: 'none',
			items: []
		},
		game: game,
		componentClasses: componentClasses
	};

	mount(document.body, this.layout);
		
	events.listen('registerTopButton', function (text$$1, icon, func, priority) {
		var button = { icon: icon, text: text$$1, func: func, priority: priority };
		var i = 0;
		var topButtons = this$1.state.topButtons;
		while (i < topButtons.length) {
			var b = topButtons[i];
			if (b.priority > priority) {
				topButtons.splice(i, 0, button);
				i = -1;
				break;
			}
			i++;
		}
		if (i >= 0) { topButtons.push(button); }
	});
		
	events.listen('requestUpdate', function () {
		console.log('requested');
		this$1.update();
	});
};
Editor.prototype.select = function select (items) {
	if (!Array.isArray(items))
		{ items = [items]; }
	this.state.selection.items = items;
		
	var types = Array.from(new Set(items.map(function (i) { return i.id.substring(0, 3); })));
	if (types.length === 0)
		{ this.state.selection.type = 'none'; }
	else if (types.length === 1)
		{ this.state.selection.type = types[0]; }
	else
		{ this.state.selection.type = 'mixed'; }
		
	this.update();
};
Editor.prototype.update = function update () {
	this.layout.update(this.state);
};
Editor.prototype.save = function save () {
	localStorage.anotherGameJSON = JSON.stringify(this.state.game.toJSON());
	console.log('saved');
};
Editor.prototype.setPackedComponent = function setPackedComponent (id, packed) {
	this.loadPackedComponent();
	this.packedComponent[id] = !!packed;
	try {
		localStorage.anotherPackedComponent = JSON.stringify(this.packedComponent);
	} catch(e) {
		console.log('wtf', e);
	}
};
Editor.prototype.getPackedComponent = function getPackedComponent (id) {
	this.loadPackedComponent();
	return this.packedComponent[id];
};
Editor.prototype.loadPackedComponent = function loadPackedComponent () {
	if (!this.packedComponent) {
		try {
			this.packedComponent = JSON.parse(localStorage.anotherPackedComponent);
		} catch(e) {
			this.packedComponent = {};
		}
	}
};

window.Property = Property;

window.PropertyModel = createPropertyType;

window.Component = Component;

window.Serializable = Serializable;

window.getSerializable = getSerializable;
//# sourceMappingURL=explore.dev.min.js.map
